// Generated by Dagger (https://dagger.dev).
package org.codeforegypt.quickassestant.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import org.codeforegypt.quickassestant.api.ContactsApi;
import org.codeforegypt.quickassestant.data.db.ContactDao;
import org.codeforegypt.quickassestant.data.db.UserDao;
import org.codeforegypt.quickassestant.domain.repository.IContactRepo;

@ScopeMetadata("dagger.hilt.android.scopes.ActivityRetainedScoped")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class ContactModule_ProvideContactsRepositoryFactory implements Factory<IContactRepo> {
  private final Provider<ContactsApi> contactsApiProvider;

  private final Provider<UserDao> userDaoProvider;

  private final Provider<ContactDao> contactDaoProvider;

  public ContactModule_ProvideContactsRepositoryFactory(Provider<ContactsApi> contactsApiProvider,
      Provider<UserDao> userDaoProvider, Provider<ContactDao> contactDaoProvider) {
    this.contactsApiProvider = contactsApiProvider;
    this.userDaoProvider = userDaoProvider;
    this.contactDaoProvider = contactDaoProvider;
  }

  @Override
  public IContactRepo get() {
    return provideContactsRepository(contactsApiProvider.get(), userDaoProvider.get(), contactDaoProvider.get());
  }

  public static ContactModule_ProvideContactsRepositoryFactory create(
      Provider<ContactsApi> contactsApiProvider, Provider<UserDao> userDaoProvider,
      Provider<ContactDao> contactDaoProvider) {
    return new ContactModule_ProvideContactsRepositoryFactory(contactsApiProvider, userDaoProvider, contactDaoProvider);
  }

  public static IContactRepo provideContactsRepository(ContactsApi contactsApi, UserDao userDao,
      ContactDao contactDao) {
    return Preconditions.checkNotNullFromProvides(ContactModule.INSTANCE.provideContactsRepository(contactsApi, userDao, contactDao));
  }
}
