// Generated by Dagger (https://dagger.dev).
package org.codeforegypt.quickassestant.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast"
})
public final class AppModule_ProvideOkHttpFactory implements Factory<OkHttpClient> {
  private final Provider<HttpLoggingInterceptor> interceptorProvider;

  public AppModule_ProvideOkHttpFactory(Provider<HttpLoggingInterceptor> interceptorProvider) {
    this.interceptorProvider = interceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOkHttp(interceptorProvider.get());
  }

  public static AppModule_ProvideOkHttpFactory create(
      Provider<HttpLoggingInterceptor> interceptorProvider) {
    return new AppModule_ProvideOkHttpFactory(interceptorProvider);
  }

  public static OkHttpClient provideOkHttp(HttpLoggingInterceptor interceptor) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideOkHttp(interceptor));
  }
}
